version: "3.8"

services:
  backend:
    build:
      context: ./backend
      target: prod
    env_file:
      - ./.env # Load common env vars
    environment:
      # Add Database URL using the correct service name 'db'
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} # Corrected host and protocol
      # Add any other production-specific backend env vars here if needed
    working_dir: /app
    ports:
      - "8000:8000" # Expose backend port 8000 (matching internal port)
    # Volumes removed for production, code is baked into the image
    restart: unless-stopped
    # Command removed for production, uses Dockerfile CMD (gunicorn on port 8000)
    depends_on:
      - db # Correct dependency name to 'db'
    networks:
      - appnet

  db: # Correct service name to 'db'
    image: postgres:15
    env_file:
      - ./.env # Load common env vars
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # No ports exposed for postgres in production by default for security
    restart: unless-stopped
    networks:
      - appnet

  frontend:
    build:
      context: ./frontend
      target: prod
    ports:
      - "8000:80"
    # Volumes removed for production, Nginx serves files from the image
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - appnet

  agent-web-search:
    build:
      context: ./backend
      dockerfile: agents/web_search.Dockerfile
      target: base # Use the base stage which has dependencies installed
    env_file:
      - ./.env
    environment:
      # Pass necessary API keys and agent ID
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - ADK_AGENT_ID=web-search-agent # Define a specific ID for this agent
      # Pass other env vars if needed by config.py or ADK
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    # No ports exposed externally in production
    # No volumes mounted in production
    restart: unless-stopped
    networks:
      - appnet


networks:
  appnet:
    driver: bridge

volumes:
  postgres_data: # Define the named volume for production

# =========================

# =========================
# Stripe CLI Webhook Forwarding
# =========================
# To forward Stripe webhooks to your backend in local development, run:
#   stripe listen --forward-to localhost:5000/api/stripe/webhook
# (Requires Stripe CLI: https://stripe.com/docs/stripe-cli)