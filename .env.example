# Decision Points AI - Example Environment Variables
# =================================================
# Copy this file to .env and fill in ALL required values below.
# This configuration is primarily intended for the local Docker development setup.

# --- Core Backend Settings ---

# [REQUIRED] Flask Secret Key: Used for session security and cryptographic signing.
# Generate a strong random key using the command:
# python -c "import secrets; print(secrets.token_hex(32))"
# Replace the placeholder below with your generated key.
# you can use any key string for local development but it is a good idea to do a secure 32 character random one
SECRET_KEY=your_strong_random_secret_key_here

# [REQUIRED] Google Gemini API Key: Needed for all AI agent interactions, including the Orchestrator panel.

# URL for the Code Generation Agent A2A endpoint
CODE_GENERATION_AGENT_URL=http://localhost:5004
# --- Agent-to-Agent (A2A) Communication URLs ---
# Base URLs for other agents that this agent might call
CONTENT_GENERATION_AGENT_URL=http://localhost:8002 # Example URL for ContentGenerationAgent
# Obtain your key from Google AI Studio: https://ai.google.dev/gemini-api/docs/api-key
# Replace the placeholder below with your actual API key.
GEMINI_API_KEY=your_google_gemini_api_key_here

# [OPTIONAL] Google Cloud Project ID: Required by the FreelanceTaskAgent for certain Google Cloud interactions.
# Obtain your Project ID from the Google Cloud Console: https://console.cloud.google.com/
GCP_PROJECT_ID=your_gcp_project_id_here


# [OPTIONAL] Brave Search API Key: Required by the WebSearchAgent for performing web searches.
# Obtain your key from Brave Search API: https://brave.com/search/api/
BRAVE_API_KEY=your_brave_search_api_key_here

# --- Agent Model Configuration ---
# Specify the Gemini models to use for different agents.
# Find available model names in the Google Gemini documentation.
# Example: 'gemini-1.5-flash', 'gemini-1.5-pro-latest'

# [REQUIRED] Model for the primary Orchestrator agent (handles user interaction via WebSocket panel).
# This agent often requires more powerful reasoning capabilities.
ORCHESTRATOR_LLM_MODEL=gemini-2.5-pro-preview-03-25

# [REQUIRED] Default model for specialized agents (e.g., Market Research, Branding, Code Generation).
# These agents often perform more focused tasks and can use a faster/cheaper model.
# Individual agents might override this if specific model variables are set for them (though none are defined by default).
SPECIALIZED_AGENT_LLM_MODEL=gemini-2.5-flash-preview-04-17

# Optional: Per-agent model overrides (Defaults to SPECIALIZED_AGENT_LLM_MODEL if not set)
# These allow fine-tuning the model used for specific agents. If a variable below
# is not set in the actual .env file, the agent will use the value of
# SPECIALIZED_AGENT_LLM_MODEL defined above.
MARKET_RESEARCH_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
IMPROVEMENT_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
BRANDING_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
CODE_GENERATION_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
CONTENT_GENERATION_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
LEAD_GENERATION_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL} # Assuming Lead Gen uses an LLM directly
# Add other agents here if they use LLMs directly and need specific model configuration
# e.g., MARKETING_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL}
# e.g., DEPLOYMENT_LLM_MODEL=${SPECIALIZED_AGENT_LLM_MODEL} # If it uses an LLM


# Optional: Override models for specific background workflow agents if needed.
# If commented out or not set, they might default to a system-wide setting or potentially the ORCHESTRATOR_MODEL.
# ACTION_AGENT_MODEL=gemini-2.5-flash-preview-04-17
# GUIDE_AGENT_MODEL=gemini-2.5-flash-preview-04-17
# ARCHON_AGENT_MODEL=gemini-2.5-flash-preview-04-17

# --- Autonomous Income Workflow Agent Settings ---

# OpenAI API Key removed - Standardizing on Gemini
# [REQUIRED] Firecrawl API Key: Used by the Market Research Agent for website scraping and data extraction.
# Obtain your key from Firecrawl: https://www.firecrawl.dev/
FIRECRAWL_API_KEY=your_firecrawl_api_key_here

# [OPTIONAL] Competitor Search Provider: Specify the search engine for competitor analysis (e.g., 'google', 'bing'). Defaults if not set.
COMPETITOR_SEARCH_PROVIDER=google

# [CONDITIONAL] Exa API Key: Required if using Exa Search within the Market Research Agent.
# Obtain your key from Exa: https://exa.ai/
EXA_API_KEY=your_exa_api_key_here

# [CONDITIONAL] Perplexity API Key: Required if using Perplexity AI within the Market Research Agent.
# Obtain your key from Perplexity: https://docs.perplexity.ai/docs/getting-started
PERPLEXITY_API_KEY=your_perplexity_api_key_here

# [REQUIRED] Market Research Agent URL: Endpoint for the Workflow Manager to communicate with the Market Research Agent.
# Example: http://market-research-agent:5001 (if running as separate service) or http://localhost:5001 (if running locally)
MARKET_RESEARCH_AGENT_URL=http://localhost:5001

# [REQUIRED] Improvement Agent URL: Endpoint for the Workflow Manager to communicate with the Improvement Agent.
# Example: http://improvement-agent:5002 or http://localhost:5002
IMPROVEMENT_AGENT_URL=http://localhost:5002

# [REQUIRED] Branding Agent URL: Endpoint for the Workflow Manager to communicate with the Branding Agent.
# Example: http://branding-agent:5003 or http://localhost:5003
BRANDING_AGENT_URL=http://localhost:5003

# [REQUIRED] Deployment Agent URL: Endpoint for the Workflow Manager to communicate with the Deployment Agent.
# Example: http://deployment-agent:5004 or http://localhost:5004
DEPLOYMENT_AGENT_URL=http://localhost:5004


# [REQUIRED] Marketing Agent URL: Endpoint for the Workflow Manager to communicate with the Marketing Agent.
# Example: http://marketing-agent:5006 or http://localhost:5006
MARKETING_AGENT_URL=http://localhost:5006

# [REQUIRED] Web Search Agent URL: Endpoint for agents to communicate with the Web Search Agent.
# Example: http://web-search-agent:5005 or http://localhost:5005
WEB_SEARCH_AGENT_URL=http://localhost:5005

# [OPTIONAL] Agent Timeout Seconds: Maximum time (in seconds) the Workflow Manager will wait for a response from a sub-agent.
# Defaults to a reasonable value (e.g., 300) if not set.
AGENT_TIMEOUT_SECONDS=300

# [OPTIONAL] A2A Max Retries: Maximum number of times the Workflow Manager will retry a failed A2A call to a sub-agent.
# Defaults to 3 if not set.
A2A_MAX_RETRIES=3

# [OPTIONAL] A2A Retry Delay Seconds: Delay (in seconds) between A2A retry attempts.
# Defaults to 2 if not set.
A2A_RETRY_DELAY_SECONDS=2


# [CONDITIONAL] Deployment Provider API Keys: Add keys required by the Deployment Agent based on your chosen provider(s).
# Examples:
# VERCEL_API_TOKEN=your_vercel_api_token_here
# CLOUDFLARE_API_TOKEN=your_cloudflare_api_token_here
# NETLIFY_AUTH_TOKEN=your_netlify_auth_token_here
# [REQUIRED] Vercel API Token: Needed by DeploymentAgent to deploy to Vercel.
# Obtain from Vercel Account Settings -> Tokens.
VERCEL_API_TOKEN=your_vercel_api_token_here
# [OPTIONAL] Vercel Team ID: Specify if deploying to a specific Vercel team.
# Find in Vercel Team Settings -> General.
VERCEL_TEAM_ID=your_vercel_team_id_here (optional)

# [CONDITIONAL] Netlify Personal Access Token: Required by DeploymentAgent to deploy to Netlify.
# Obtain from Netlify User Settings -> Applications -> Personal access tokens.
NETLIFY_AUTH_TOKEN=your_netlify_auth_token_here
# [OPTIONAL] Netlify Site ID: Specify if deploying to a specific existing Netlify site.
# If omitted, the agent will attempt to create a new site.
# Find in Netlify Site Settings -> General -> Site details -> API ID.
NETLIFY_SITE_ID=your_netlify_site_id_here (optional)

# AWS_ACCESS_KEY_ID=your_aws_access_key_id
# AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
# AZURE_CLIENT_ID=your_azure_client_id
# AZURE_CLIENT_SECRET=your_azure_client_secret
# AZURE_TENANT_ID=your_azure_tenant_id
# AZURE_SUBSCRIPTION_ID=your_azure_subscription_id

# --- Frontend Settings ---

# [REQUIRED] API Base URL: The URL the frontend UI (running in your browser) uses
# to communicate with the backend API service.
# For the default Docker development setup (docker-compose.dev.yml),
# this MUST be http://localhost:5000 as the backend container's port 5000
# is mapped to port 5000 on your host machine.
VITE_API_BASE_URL=http://localhost:5000

# =================================================
# End of Example Environment Variables
# =================================================

# trying to fix the containers
FLASK_ENV=development