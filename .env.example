# Decision Points AI - Example Environment Variables
# =================================================
# Copy this file to .env in the project root and fill in ALL required values.
# This configuration is primarily intended for the local Docker development setup.

# --- Core Backend & Security ---

# [REQUIRED] Secret Key: Used for session security, JWT signing, etc.
# Generate a strong random key (e.g., python -c "import secrets; print(secrets.token_hex(32))")
SECRET_KEY=your_strong_random_32_byte_secret_key_here

# [OPTIONAL] JWT Algorithm (Default: HS256)
# ALGORITHM=HS256

# [OPTIONAL] JWT Token Expiry in Minutes (Default: 30)
# ACCESS_TOKEN_EXPIRE_MINUTES=30

# [OPTIONAL] Log Level (Default: INFO)
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# LOG_LEVEL=INFO

# --- Database (PostgreSQL) ---
# For local development, you can typically use simple values.
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=postgres
# POSTGRES_DB=decision_points_dev
# (You can choose a different password or DB name if you prefer, just ensure they match what the backend service expects)
# [REQUIRED] PostgreSQL User for the application database
POSTGRES_USER=decision_points_user

# [REQUIRED] PostgreSQL Password for the application user
POSTGRES_PASSWORD=your_secure_postgres_password

# [REQUIRED] PostgreSQL Database Name
POSTGRES_DB=decision_points_db

# [REQUIRED] Database Connection URL for SQLAlchemy (uses variables above for Docker)
# Format: postgresql+asyncpg://<user>:<password>@<host>:<port>/<database_name>
# The 'db' hostname refers to the PostgreSQL service name in docker-compose.yml
DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

# --- Kafka ---

# [REQUIRED] Kafka Bootstrap Servers
# Use 'kafka:9092' for the default Docker Compose setup
KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# [OPTIONAL] Kafka Example Topic (Default: example_topic)
# KAFKA_EXAMPLE_TOPIC=example_topic

# [OPTIONAL] Kafka Consumer Group ID (Default: decision_points_group)
# KAFKA_CONSUMER_GROUP_ID=decision_points_group

# --- AI Models & External APIs ---

# [REQUIRED] Google Gemini API Key: Needed for all AI agent interactions.
# Obtain from Google AI Studio: https://ai.google.dev/gemini-api/docs/api-key
GEMINI_API_KEY=your_google_gemini_api_key_here

# [OPTIONAL] Google API Key: May be needed for other Google services (e.g., Search).
# Obtain from Google Cloud Console.
GOOGLE_API_KEY=your_google_api_key_here

# [REQUIRED] Firecrawl API Key: Used for website scraping/extraction.
# Obtain from Firecrawl: https://www.firecrawl.dev/
FIRECRAWL_API_KEY=your_firecrawl_api_key_here

# [CONDITIONAL] Exa API Key: Required if using Exa Search.
# Obtain from Exa: https://exa.ai/
EXA_API_KEY=your_exa_api_key_here

# [CONDITIONAL] Perplexity API Key: Required if using Perplexity AI.
# Obtain from Perplexity: https://docs.perplexity.ai/docs/getting-started
PERPLEXITY_API_KEY=your_perplexity_api_key_here

# [CONDITIONAL] Brave Search API Key: Required if using Brave Search.
# Obtain from Brave Search API: https://brave.com/search/api/
BRAVE_API_KEY=your_brave_search_api_key_here

# [CONDITIONAL] Composio API Key: Required if using Composio integrations.
# Obtain from Composio: https://composio.dev/
COMPOSIO_API_KEY=your_composio_api_key_here

# --- Agent Configuration ---

# [OPTIONAL] Default Gemini Model Name (Default: gemini-2.5-flash-preview-04-17)
# Used by agents unless overridden by specific logic.
# GEMINI_MODEL_NAME=gemini-2.5-flash-preview-04-17

# [OPTIONAL] Competitor Search Provider (Default: exa)
# Options: 'exa', 'perplexity' (ensure corresponding API key is set)
# COMPETITOR_SEARCH_PROVIDER=exa

# [OPTIONAL] Agent Timeout Seconds (Default: 300)
# Timeout for waiting on A2A skill calls.
# AGENT_TIMEOUT_SECONDS=300

# [OPTIONAL] A2A Max Retries (Default: 3)
# Max retries for failed A2A skill calls.
# A2A_MAX_RETRIES=3

# [OPTIONAL] A2A Retry Delay Seconds (Default: 2)
# Initial delay between A2A retries (uses exponential backoff).
# A2A_RETRY_DELAY_SECONDS=2

# --- Agent Service Locators (ADK Agent IDs) ---
# These IDs are used by ADK for routing A2A calls.
# Ensure these match the agent IDs configured when running the agent services.

# [REQUIRED] ADK Agent ID for this Backend Service itself
ADK_AGENT_ID=decision-points-backend-dev

# [REQUIRED] Agent ID for Web Search Agent
WEB_SEARCH_AGENT_ID=web-search-agent

# [REQUIRED] Agent ID for Content Generation Agent
CONTENT_GENERATION_AGENT_ID=content-generation-agent

# [REQUIRED] Agent ID for Market Research Agent
MARKET_RESEARCH_AGENT_ID=market-research-agent

# [REQUIRED] Agent ID for Improvement Agent
IMPROVEMENT_AGENT_ID=improvement-agent

# [REQUIRED] Agent ID for Branding Agent
BRANDING_AGENT_ID=branding-agent

# [REQUIRED] Agent ID for Code Generation Agent
CODE_GENERATION_AGENT_ID=code-generation-agent

# [REQUIRED] Agent ID for Deployment Agent
DEPLOYMENT_AGENT_ID=deployment-agent

# [REQUIRED] Agent ID for Marketing Agent
MARKETING_AGENT_ID=marketing-agent

# [REQUIRED] Agent ID for Lead Generation Agent
LEAD_GENERATION_AGENT_ID=lead-generation-agent

# [REQUIRED] Agent ID for Freelance Task Agent
FREELANCE_TASKER_AGENT_ID=freelance-task-agent

# --- Deployment Agent Specifics (Conditional) ---
# Add keys required by the Deployment Agent based on your chosen provider(s).

# [CONDITIONAL] Vercel API Token: Required for Vercel deployments.
# Obtain from Vercel Account Settings -> Tokens.
# VERCEL_API_TOKEN=your_vercel_api_token_here

# [OPTIONAL] Vercel Team ID: Specify if deploying to a specific Vercel team.
# Find in Vercel Team Settings -> General.
# VERCEL_TEAM_ID=your_vercel_team_id_here

# [CONDITIONAL] Netlify Personal Access Token: Required for Netlify deployments.
# Obtain from Netlify User Settings -> Applications -> Personal access tokens.
# NETLIFY_AUTH_TOKEN=your_netlify_auth_token_here

# [OPTIONAL] Netlify Site ID: Specify if deploying to an existing Netlify site.
# If omitted, the agent may attempt to create a new site.
# Find in Netlify Site Settings -> General -> Site details -> API ID.
# NETLIFY_SITE_ID=your_netlify_site_id_here

# --- Frontend Settings ---

# [REQUIRED] API Base URL: The URL the frontend UI uses to call the backend API.
# For the default Docker dev setup, this MUST be http://localhost:8000
# as the backend container's port 8000 is mapped to port 8000 on the host.
VITE_API_BASE_URL=http://localhost:8000

# =================================================
# End of Example Environment Variables
# =================================================